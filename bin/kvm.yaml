---
- name: create VMs
  hosts: kvm
  become: true

  vars_files:
    - vms.yml

  tasks:
    - name: get VM disks
      command: "ls {{ vm_location }}"
      register: disks
      changed_when: "disks.rc != 0"
    - name: exportando a LIBGUESTFS_BACKEND=direct
      shell: "export LIBGUESTFS_BACKEND=direct"

#    - name: ajustando permissao do storage das imagens 1
#      file:
#       path: "{{ vm_location }}" 
#       state: directory
#       recurse: yes
#       owner: qemu
#       group: qemu

    - name: create disk 
    #centos
     command: >
              virt-builder -v  --format qcow2 {{ os_type }} 
              -o {{ vm_location }}{{ item.key }}.{{ file_type }}
              --size 30G
              --hostname {{ item.key }}   
              --root-password password:{{ root_pass }} --selinux-relabel
              --run /home/jcastro/devops/kvm/install.sh
              --ssh-inject devops:file:/home/jcastro/.ssh/id_rsa.pub
          
      #ubuntu         
      command: >
              virt-builder -x {{ os_type }} 
              -o {{ vm_location }}{{ item.key }}.{{ file_type }}
              --size 30G
              --hostname {{ item.key }}   
              --root-password password:{{ root_pass }}
              --run /home/jcastro/devops/kvm/install.sh
              --ssh-inject devops:file:/home/jcastro/.ssh/id_rsa.pub
             # --run /home/jcastro/Documents/estudos/kvm/install.sh
             #  --ssh-inject /home/jcastro/.ssh/id_rsa.pub
                  # --firstboot-command 'useradd devops' 
              # --firstboot-command 'echo 'password' | passwd --stdin devops'


               



                          
      when: item.key not in disks.stdout
      with_dict: "{{ guests }}"
    
        #    - name: ajustando permissao do storage das imagens 
        #    file:
        # path: "{{ vm_location }}" 
        #  state: directory
        # recurse: yes
        # owner: qemu
        #group: qemu
      
    - name: get list of VMs
      virt:
        command: "list_vms"
      register: vms

    - name: create vm
      command: >
                virt-install -v --import --name {{ item.key }}
                --memory {{ item.value.mem }} --vcpus {{ item.value.cpus }}
                --disk {{ vm_location }}/{{ item.key }}.{{ file_type }}
                --noautoconsole --os-variant {{ os_variant }}  
                --network network={{ network }}
                --graphics vnc  
               # --ssh-key=/home/jcastro/.ssh/id_rsa.pub
                    
      when: item.key not in vms.list_vms
      with_dict: "{{ guests }}"

    - name: start vm
      virt:
        name: "{{ item.key }}"
        state: running
      with_dict: "{{ guests }}"

    



